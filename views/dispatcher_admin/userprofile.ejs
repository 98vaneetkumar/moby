<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>User Profile</title>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css"
    />
    <style>
      body {
        font-family: sans-serif;
      }

      .navbar {
        font-family: inherit; /* Keeps the navbar's original font */
      }

      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: sans-serif;
      }
      .container {
        width: 80%;
        margin: auto;
        padding: 20px;
        margin-top: 40px;
      }
      .profile-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
      }
      .profile-info {
        display: flex;
        align-items: center;
        gap: 20px;
      }
      .profile-pic {
        width: 100px;
        height: 100px;
        border-radius: 50%;
        object-fit: cover;
        cursor: pointer;
      }
      .edit-btn {
        background: black;
        color: white;
        border: none;
        padding: 10px 20px;
        cursor: pointer;
        border-radius: 5px;
      }
      .cancel-btn {
        background: #e76c65;
        color: white;
        border: none;
        padding: 10px 20px;
        cursor: pointer;
        border-radius: 5px;
      }
      .profile-form {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        margin-top: 20px;
      }
      .form-group {
        width: 48%;
      }
      input {
        width: 100%;
        padding: 12px;
        border: none;
        background: rgb(238, 244, 248);
        border-radius: 5px;
      }
      .form-group label {
        display: block;
        margin-bottom: 5px;
      }
      .hidden {
        display: none;
      }

      h2 {
        font-weight: 400;
        color: #7a5d9f;
      }
      h3 {
        font-weight: 500;
      }
      .date {
        margin-top: 10px;
        font-size: small;
        font-weight: 200;
        color: grey;
      }
      .smallemail {
        font-size: small;
        font-weight: 200;
        color: grey;
      }
    </style>
  </head>
  <body>
    <%- include('./common/navbar.ejs') %>

    <div class="container">
      <div class="profile-header">
        <div>
          <h2>
            <h2>Welcome, <%= userSite_session.fullName.split(" ")[0] %></h2>
          </h2>
          <p class="date"><%= new Date().toDateString() %></p>
        </div>
        <button class="edit-btn" id="editBtn">Edit</button>
      </div>

      <div class="profile-info">
        <img
          src="<%= user.profilePicture ? user.profilePicture : '/assets/defaultpic.jpg' %>"
          alt="Profile Picture"
          class="profile-pic"
          id="profilePicturePreview"
        />
        <div>
          <h3>
            <h3><%= user.fullName ? user.fullName : "N/A" %></h3>
          </h3>
          <p class="smallemail"><%= user.email ? user.email : "N/A" %></p>
        </div>
      </div>

      <form id="profileForm" class="profile-form">
        <div class="form-group">
          <label>Full Name</label>
          <input type="text" placeholder="Your Name" value="<%= (user.fullName ?
          user.fullName : "N/A") %>" disabled />
        </div>
        <div class="form-group">
          <label>Phone Number</label>
          <input
            type="text"
            placeholder="Phone Number"
            value="<%= user.phoneNumber ? user.phoneNumber : 'N/A' %>"
            disabled
          />
        </div>
        <div class="form-group">
          <label>Business Name</label>
          <input
            type="text"
            placeholder="Business Name"
            value="<%= user.businessName ? user.businessName : 'N/A' %>"
            disabled
          />
        </div>
        <div class="form-group">
          <label>Email</label>
          <input
            type="email"
            placeholder="Email"
            value="<%= user.email ? user.email : 'N/A' %>"
            disabled
          />
        </div>
        <div class="form-group">
          <label>Business Address</label>
          <input
            type="text"
            id="business-address"
            placeholder="Business Address"
            value="<%= user.businessAddress ? user.businessAddress : 'N/A' %>"
            disabled
          />

          <!-- Hidden fields to store coordinates -->
          <input type="hidden" id="businessLat" name="businessLatitude" />
          <input type="hidden" id="businessLong" name="businessLongitude" />
        </div>
        <div class="form-group">
          <label>Change Password</label>
          <input type="password" placeholder="Change Password" disabled />
        </div>
        <input
          type="file"
          id="profilePictureInput"
          class="hidden"
          accept="image/*"
        />
        <button type="submit" class="edit-btn hidden" id="saveBtn">Save</button>
        <button type="button" class="cancel-btn hidden" id="cancelBtn">
          Cancel
        </button>
      </form>
    </div>

    <script
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAcWaQOI8ee-mAh7CDGOuJ0--u4MCN6elw&libraries=places"
      async
      defer
    ></script>

    <!-- Google Places API and Autocomplete Script -->
    <script>
      let autocomplete;

      // Initialize autocomplete only when edit button is clicked
      function initializeAutocomplete() {
        const businessAddressInput =
          document.getElementById("business-address");

        if (!businessAddressInput) {
          console.error("Business Address input not found");
          return;
        }

        autocomplete = new google.maps.places.Autocomplete(
          businessAddressInput,
          {
            types: ["geocode"],
          }
        );

        autocomplete.addListener("place_changed", function () {
          const place = autocomplete.getPlace();

          if (!place.geometry || !place.geometry.location) {
            console.error("No geometry data found for the selected place.");
            return;
          }

          // Set latitude and longitude values
          document.getElementById("businessLat").value =
            place.geometry.location.lat();
          document.getElementById("businessLong").value =
            place.geometry.location.lng();

          console.log("Latitude:", place.geometry.location.lat());
          console.log("Longitude:", place.geometry.location.lng());
        });
      }
    </script>

    <script>
      const editBtn = document.getElementById("editBtn");
      const cancelBtn = document.getElementById("cancelBtn");
      const saveBtn = document.getElementById("saveBtn");
      const profilePicturePreview = document.getElementById(
        "profilePicturePreview"
      );
      const profilePictureInput = document.getElementById(
        "profilePictureInput"
      );

      // Store original values for cancel functionality
      let originalValues = {};
      let originalprofilePictureSrc = profilePicturePreview.src; // Store original profile picture
      let isEditMode = false; // Track edit mode

      editBtn.addEventListener("click", function () {
        document.querySelectorAll("#profileForm input").forEach((input) => {
          if (input.id) {
            originalValues[input.id] = input.value; // Save original values
          }
          input.removeAttribute("disabled");
        });

        // Initialize Google Places Autocomplete only when in edit mode
        if (
          typeof google !== "undefined" &&
          typeof google.maps !== "undefined" &&
          typeof google.maps.places !== "undefined"
        ) {
          initializeAutocomplete();
        } else {
          console.error("Google Maps API not loaded yet");
          // Optional: add a retry mechanism or alert user
        }

        originalprofilePictureSrc = profilePicturePreview.src; // Save original profile picture
        isEditMode = true; // Enable edit mode

        saveBtn.classList.remove("hidden");
        cancelBtn.classList.remove("hidden");
        editBtn.classList.add("hidden"); // Hide edit button
      });

      cancelBtn.addEventListener("click", function () {
        document.querySelectorAll("#profileForm input").forEach((input) => {
          if (input.id && originalValues[input.id]) {
            input.value = originalValues[input.id]; // Restore original values
          }
          input.setAttribute("disabled", "true");
        });

        profilePicturePreview.src = originalprofilePictureSrc; // Restore original profile picture
        isEditMode = false; // Disable edit mode

        saveBtn.classList.add("hidden");
        cancelBtn.classList.add("hidden");
        editBtn.classList.remove("hidden"); // Show edit button again
      });

      // Handle profile picture upload (ONLY in edit mode)
      profilePicturePreview.addEventListener("click", function () {
        if (isEditMode) {
          profilePictureInput.click(); // Trigger file input
        }
      });

      profilePictureInput.addEventListener("change", function (event) {
        const file = event.target.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = function (e) {
            profilePicturePreview.src = e.target.result;
          };
          reader.readAsDataURL(file);
        }
      });
    </script>

    <script>
      saveBtn.addEventListener("click", async function (event) {
        event.preventDefault(); // Prevent default form submission

        const formData = new FormData();
        formData.append(
          "fullName",
          document.querySelector("input[placeholder='Your Name']").value.trim()
        );
        formData.append(
          "phoneNumber",
          document
            .querySelector("input[placeholder='Phone Number']")
            .value.trim()
        );
        formData.append(
          "businessName",
          document
            .querySelector("input[placeholder='Business Name']")
            .value.trim()
        );
        formData.append(
          "email",
          document.querySelector("input[placeholder='Email']").value.trim()
        );
        formData.append(
          "businessAddress",
          document
            .querySelector("input[placeholder='Business Address']")
            .value.trim()
        );
        // Append latitude and longitude values
        formData.append(
          "businessLatitude",
          document.getElementById("businessLat").value.trim()
        );
        formData.append(
          "businessLongitude",
          document.getElementById("businessLong").value.trim()
        );

        // Append the selected profile picture
        if (profilePictureInput.files.length > 0) {
          formData.append("profilePicture", profilePictureInput.files[0]);
        }

        try {
          const response = await fetch("/users/updateUserProfile", {
            method: "POST",
            body: formData, // Send as FormData
          });

          const result = await response.json();

          if (response.ok) {
            Swal.fire({
              position: "top-end",
              icon: "success",
              title: "Profile updated successfully!",
              showConfirmButton: false,
              timer: 3000,
              toast: true,
            }).then(() => {
              location.reload(); // Refresh page to reflect changes
            });
          } else {
            showErrorAlert(result.message || "Error updating profile.");
          }
        } catch (error) {
          console.error("Error:", error);
          showErrorAlert("Something went wrong. Please try again.");
        }
      });
    </script>
  </body>
</html>
